<style>
  /* Style the tab */
  #tabs {
    overflow: hidden;
  }
  
  /* Style the buttons inside the tab */
  #tabs div {
    float: left;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
    font-size: 17px;
  }
  
  /* Style the tab content */
  .tabcontent {
    display: none;
    padding: 6px 12px;
    border-top: none;
  }
</style>

<main>
  <h1>Most Recent Challenge</h1>

  <form id="challengeForm" onsubmit="return handleReplacementPost(event)">
    <input type="text" readonly="true" name="title" id="title">
    <div id="tabs"></div>
    <div id="solutionSlide"></div>

    <input type="submit" id="submitBtn" value="Replace" />
  </form>
</main>

<script>  
  function handleReplacementPost(e) {
    e.preventDefault();
    const data = [...(new FormData(document.getElementById("challengeForm"))).entries()];
    const newPayload = new Map();
    const langEntry = new Map();
    const languages = [];
    newPayload.set(data[0][0], data[0][1]);

    for (let entry of data) {
      switch (entry[0]) {
        case "solution":
          if (!entry[1]) {
            alert("Cannot submit an empty solution");
            return false;
          }

          langEntry.set(entry[0], entry[1]);
          break;

        case "language": 
          langEntry.set(entry[0], entry[1])
          languages.push(Object.fromEntries(langEntry));
          break;
      }
    }

    newPayload.set("languages", languages);
    console.log(Object.fromEntries(newPayload))

    fetch("/replace-challenge", {
      method: "POST",
      credentials: 'same-origin', 
      headers: {
        'Content-Type': 'application/json'
        // 'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: JSON.stringify(Object.fromEntries(newPayload))
    });
  }

  function loadDOM({title, languages}) {
    const slide = document.getElementById('solutionSlide');
    const tabs = document.getElementById('tabs');
    const formTitle = document.getElementById('title');
    formTitle.value = title;

    languages.forEach((language, index) => {
      const { textarea } = (language.isPlaceholder) ? {
        textarea: `<textarea id="${language.language}" name="solution" cols="30" rows="10" class="tabcontent" placeholder="${language.solution}"></textarea>`
      } : {
        textarea: `<textarea id="${language.language}" name="solution" cols="30" rows="10" class="tabcontent">${language.solution}</textarea>`
      } 
      
      slide.innerHTML += textarea;
      slide.innerHTML += `<input type="hidden" name="language" value="${language.language}" />`;
      tabs.innerHTML += `<div class="tablinks" onclick="openSolution(event, '${language.language}', ${language.isPlaceholder})">${language.language}</div>`;
    });
    
    slide.children[0].style.display = "block";
  }

  function openSolution(evt, solutionName, isPlaceholder) {
    var i, tablinks, tabcontent;
    tabcontent = document.getElementsByClassName("tabcontent");

    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }

    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    
    document.getElementById(solutionName).style.display = "block";
    evt.currentTarget.className += " active";
  }
  
  (async function() {
    if (!<%= data.ok %>) return loadDOM({
      title: "Error - Could not fetch cache",
      languages: [
        {
          language: "ERR",
          solution: "Check firewall / if redis is properly integrated",
          isPlaceholder: true
        }
      ]
    });

    const { name, completedLanguages } = (await (await fetch("https://www.codewars.com/api/v1/users/Alvarian_/code-challenges/completed", 
      {
        method: "GET",
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
      }
    )).json()).data[0];

    const payload = (JSON.parse(<%- JSON.stringify(data.msg) %>)) && (JSON.parse(<%- JSON.stringify(data.msg) %>)).title === name ? (JSON.parse(<%- JSON.stringify(data.msg) %>)) : {title: name, languages: []};

    completedLanguages.forEach(apiLang => {
      const isMatched = !!payload.languages.find(cachedLang => cachedLang.language === apiLang);
      
      !isMatched && payload.languages.push({
        language: apiLang,
        solution: `Include [${apiLang}] solution`,
        isPlaceholder: true
      });
    });
    
    loadDOM(payload);
  })();
</script>